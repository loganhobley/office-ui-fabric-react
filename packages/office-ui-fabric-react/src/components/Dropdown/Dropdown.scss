@import '../../common/common';

// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE in the project root for license information.

//
// Office UI Fabric
// --------------------------------------------------
// Dropdown styles

$Dropdown-selectedItem-bg: $ms-color-neutralQuaternaryAlt;
$Dropdown-selectedItem-hover-bg: $ms-color-neutralLighter;
$DropDown-height: 32px;
$DropDown-item-height: 32px;

// Mixin for high contrast mode link states
@mixin highContrastListItemState {
  @include high-contrast {
    background-color: Highlight;
    border-color: Highlight;
    color: HighlightText;
  }

  @include highContrastAdjust();
}

.root {
  @include ms-normalize;
  @include ms-font-m;
  color: $ms-color-neutralPrimary;

  position: relative;
  outline: 0;
  user-select: none;

  &:hover,
  &:focus,
  &:active {
    .title,
    .caretDown {
      color: $ms-color-neutralDark;

      @include high-contrast {
        // Using Highlight for text here specifically to match the border color that indicates focus on dropdown root elements.
        color: Highlight;
      }
    }

    .titleIsPlaceHolder {
      color: $ms-color-neutralSecondary;
    }
  }

  &:hover {
    .title {
      border-color: $ms-color-neutralDark;
    }
  }

  &:active {
    .title {
      border-color: $ms-color-themeDark;
    }
  }

  &:focus {
    .title {
      border-color: $ms-color-themePrimary;
    }
  }

  :global(.ms-Label) {
    display: inline-block;
    margin-bottom: 8px;
  }
}

//== State: A disabled dropdown
.root.rootIsDisabled {
  .title {
    background-color: $ms-color-neutralLighter;
    border: none;
    color: $ms-color-neutralTertiary;
    cursor: default;

    @include high-contrast {
      border-color: GrayText;
      color: GrayText;
    }

    &.titleIsError {
        border-color: $ms-color-error;
    }
  }

  .caretDown {
    color: $ms-color-neutralTertiary;

    @include high-contrast {
      color: GrayText;
    }
  }
}

.caretDownWrapper {
  position: absolute;
  top: 1px; // border
  @include ms-right(12px);
  height: $DropDown-height;
  line-height: $DropDown-height - 2px; // height minus the border
}

.caretDown {
  color: $ms-color-neutralSecondary;
  font-size: $ms-icon-size-s;
  pointer-events: none;
}

// Style the new, replacement component
.title {
  @include ms-normalize;
  background: $ms-color-white;
  border: 1px solid $ms-color-neutralTertiary;
  cursor: pointer;
  display: block;
  height: $DropDown-height;
  line-height: $DropDown-height - 2px; // height minus the border
  @include padding(0, $DropDown-height, 0, 12px);
  position: relative;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  &.titleIsError {
    border-color: $ms-color-error;
  }
  &.titleIsPlaceHolder {
    color: $ms-color-neutralSecondary;
  }
}

.panel {
    // Force drop shadow even under medium breakpoint
    :global(.ms-Panel-main) {
      @include ms-drop-shadow(-30px, 0px, 30px, -30px, .2);
    }
    // Remove padding as items have their own padding and bg
    :global(.ms-Panel-contentInner) {
      padding: 0 0 20px
    }
  }

.callout {
  box-shadow: 0 0px 2px 0px rgba(0, 0, 0, 0.2);
  border: 1px solid $ms-color-neutralLight;
}

.errorMessage{
    color: $ms-color-error;
  &::before {
    content: '* ';
  }
}

.items {
  display: block;
}

// Container for the dropdown items, displayed as a panel on small screens.
.item {
  background: transparent;
  box-sizing: border-box;
  cursor: pointer;
  display: block;
  width: 100%;
  height: auto;
  min-height: $DropDown-item-height;
  line-height: 20px;
  padding: 4px 16px;
  position: relative;
  border: 1px solid transparent;
  word-wrap: break-word;
  overflow-wrap: break-word;
  text-align: left;

  @include high-contrast {
    border-color: Window;
  }

  &:hover {
    background-color: $Dropdown-selectedItem-hover-bg;
    color: $ms-color-black;

    @include highContrastListItemState;
  }

  @include focus-border();

  &:focus {
    background-color: $ms-color-neutralLighter;
  }

  &:active {
    background-color: $Dropdown-selectedItem-hover-bg;
    color: $ms-color-black;
  }

  &.itemIsDisabled {
    background: $ms-color-white;
    color: $ms-color-neutralTertiary;
    cursor: default;
  }
  :global(.ms-Button-flexContainer) {
    justify-content: flex-start;
  }
}

//== State: A selected dropdown item
.item.itemIsSelected {
  background-color: $Dropdown-selectedItem-bg;
  color: $ms-color-black;

  &:hover {
    background-color: $Dropdown-selectedItem-bg;
  }

  @include focus-border();

  @include highContrastListItemState;
}

.header {
  @include ms-font-m;
  font-weight: $ms-font-weight-semibold;
  color: $ms-color-themePrimary;
  background: none;
  border: none;
  height: $DropDown-item-height;
  line-height: $DropDown-item-height;
  cursor: default;
  padding: 0px 16px;
  user-select: none;
  @include text-align(left);
}

.divider {
  height: 1px;
  background-color: $bodyDividerColor;
}

.optionText {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  min-width: 0px;
  max-width: 100%;
  word-wrap: break-word;
  overflow-wrap: break-word;
  margin: 1px;
}